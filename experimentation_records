2017/09/12

Snyder, 1 node, 20GB MEM
Leapfrog trie join:
	#COUNT
	Query execution time: 229.315680
	1656074926

Emptyheaded:
	TRIANGLE LIST
	Time[LOADING Trie Edge_0_1]: 1.48853 s
	Time[LOADING ENCODINGS uint32_t]: 0.0098897 s
	NUM ROWS: 1656074926 ANNOTATION: 0x1a1b10001a1b0
	Time[BAG TriangleList TIME]: 34.2453 s
	Time[QUERY TIME]: 34.2453 s

2017/09/20
Snyder, 1 node, 20GB MEM
	#COUNT
	Query execution time: 111.906720
	1656074926

2017/09/27
Snyder, 1 node/20ppn, 20GB MEM
	#COUNT
	Query execution time: 57.813439
	1656074926
	129269793 microseconds
	[success] Total time: 130 s, completed Sep 27, 2017 1:01:25 AM

2017/09/28
When I run gplus_test on Snyder with the follwing settings, it gives these results:
1 node/10 ppn/csit queue: Killed (because of starvation?)
1 node/20 ppn/csit queue: 57s

sbt command: sbt "test:run c fb_test"
compile options: -mavx2 -fPIC -std=c++0x -pedantic -O3 -Wall -Wno-unused-function -Wextra -march=native -mtune=native


2017/10/18
1. Inline all functions in the old gplus_test.c. Result: becomes slower
   #COUNT
   Query execution time: 72.296858
   1656074926

2. Bitset generated for fb_test is of size: (234773967 * sizeof(uint64_t))
   inline/take out inline doesn't affect the run time. But the lambda makes the program slow.
      #COUNT
   	  count = 9672060
	  Query execution time: 0.481780
	  3200498 microseconds

3. We need prove that inline in C++ is not as efficient as LMS:
   1. rewrite our nprr (in iterative or recursive way???) to generate code without lambda expression while doing the same thing. (build result trie and count on the cardinality result).
   2. don't forget to build index in the result trie.
   3. Currently, we need estimate the size of result trie and allocate memory beforehand. Can we improve it?
   4. We can measure the skew in result trie. Maybe by counting skewed sets? Investigate the policy EmptyHeaded takes.
   5. Can we modify EmptyHeaded code to make everything not inlined and see the performance?
   6. Implement multithreading version after all those. Need understand how EmptyHeaded store the ParTrie and build the ParTrie

======= Build the result trie: 
    Recursion version nprr:
        #COUNT
	   	9672060
	   	Query execution time: 0.491201

    Lambda version nprr:
	    #COUNT
   	  	count = 9672060
	  	Query execution time: 0.481780

    Recursion version nprr with all function inlined:
	    #COUNT
		9672060
		Query execution time: 0.522330


    Recursion version nprr:
        #COUNT
	   	9672060
	   	Query execution time: 0.491201

    Lambda version nprr:
	    #COUNT
   	  	count = 9672060
	  	Query execution time: 0.481780

    Recursion version nprr with all function inlined:
	    #COUNT
		9672060
		Query execution time: 0.522330

======= Do NOT build the result trie:
    Recursion version nprr with all function inlined:
        #COUNT
		9672060
		Query execution time: 0.042487



======= Do NOT Build the result trie: (gplus):
    Recursion version nprr with all function inlined:
	    #COUNT
		1656074926
		Query execution time: 34.844064

    Recursion version nprr with all function not inlined:
        #COUNT
		1656074926
		Query execution time: 37.465318

    Lambda version nprr with all function inlined:
	    #COUNT
		count = 1656074926
		Query execution time: 35.372754

    Lambda version nprr with all function not inlined:
	    #COUNT
		count = 1656074926
		Query execution time: 36.874488

2017/11/07
	Implement range_bitset and uinteger exactly as EH does.


2018/02/20
    FB test becomes much faster on my laptop:
       #COUNT
       mem usage for trie: 14518914
       Query execution time: 0.016195
       Cardinality of result trie = 9672060
    Reason: ???